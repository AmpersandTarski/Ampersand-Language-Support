{
	"This section is for comments only": {
		"prefix": "SNIPPET COMMENTS",
		"description": "Design considerations - this snippet is not intended to be executed",
		"body":[
			"These Snippets are intended to make life easier for Ampersand developers.",
			"We use the convention to start names of placeholders with an illegal character,",
			"so that it will be colored red while it has not been replaced with user text."
		]
	},
	"Preprocessor statements": {
		"prefix": "--#",
		"description": "Preprocessor statements",
		"body":[ "--#${1:|IF ${2:variable},IFNOT ${2:variable},ELSE,ENDIF|}" ]
	},
	"Define a context": {
		"prefix": "CONTEXT",
		"description": "Define a CONTEXT. You may need to add the PURPOSE statement yourself",
		"comment": "this snippet ensures that you do not forget the corresponding 'ENDCONTEXT' statement",
		"body":[
			"CONTEXT \"${1:name}\"",
			"$0",	
			"ENDCONTEXT"
		]
	},
	"Define a concept": {
		"prefix": "CONCEPT",
		"description": "Define a CONCEPT and optionally, a reference",
		"comment": "this snippet ensures that you do not forget about the optional reference text",
		"body":[ "CONCEPT ${1:cname} \"${2:description}\" \"$0\"" ]
	},
	"Define a CLASSIFY ISA statement": {
		"prefix": "CLASSIFY",
		"description": "CLASSIFY <Conceptlist> ISA <GenericConcept>",
		"body":[ "CLASSIFY ${1:ConceptList} ISA ${2:genericConcept}" ]
	},
	"Define a CLASSIFY IS statement": {
		"prefix": "CLASSIFY",
		"description": "CLASSIFY <Conceptlist> IS <GenericConcept1> /\\ <GenericConcept2> /\\... <GenericConcept<n>>",
		"body":[ "CLASSIFY ${1:ConceptList} IS ${2:genericConcept} /\\ ${3:genericConcept}" ]
	},
	"Define a Concepts population": {
		"prefix": "POPULATION",
		"description": "Define a POPULATION of Concept Atoms",
		"body":[ "POPULATION \"${1:concept}\" CONTAINS [ \"$0\" ]" ]
	},
	"TYPE statement": {
		"prefix": "TYPE",
		"description": "Choose one of the allowed TYPEs",
		"body":[ "TYPE ${1|ALPHANUMERIC,BIGALPHANUMERIC,DATE,DATETIME,BOOLEAN,INTEGER,FLOAT,PASSWORD,OBJECT,BINARY,BIGBINARY,HUGEALPHANUMERIC,HUGEBINARY|}" ]
	},
	"Define a RELATION statement": {
		"prefix": "RELATION",
		"description": "RELATION <relname>[<SrcConcept>*<TgtConcept>]",
		"body":[ "RELATION ${1:Relname}[${2:srcConcept} * ${3:tgtConcept}] " ]
	},
	"Define a relation (::-notation)": {
		"prefix": "RELATION",
		"description": "<relname> :: <SrcConcept> * <TgtConcept>",
		"body":[ "${1:Relname} :: ${2:srcConcept} * ${3:tgtConcept} " ]
	},
	"Define a Relation population": {
		"prefix": "POPULATION",
		"description": "Define a POPULATION of Relation pairs/links",
		"body":[ "POPULATION ${1:Relname} CONTAINS [ (\"$2\", \"$3\") ]"	]
	},
	"SERVICE MAINTAINS RULE": {
		"prefix": "SERVICE",
		"description": "Define a RULE that the specified SERVICE will maintain",
		"body":[
			"SERVICE \"$1\" MAINTAINS \"$2\"",
			"RULE \"${2:rulename}\": "
		]
	},
	"ExecEngine MAINTAINS RULE": {
		"prefix": "ROLE ExecEngine MAINTAINS",
		"description": "Define a RULE that the ExecEngine will maintain",
		"body":[
			"ROLE ExecEngine MAINTAINS \"$1\"",
			"RULE \"${1:rulename}\": "
		]
	},	"RULE": {
		"prefix": "RULE",
		"description": "Template for invariant rule",
		"body":[
			"RULE \"${1:rulename}\": ${0:rule-expression}"
		]
	},
	"TXT": {
		"prefix": "TXT ",
		"description": "Define a TXT fragment within a VIOLATION or VIEW",
		"body":[ "TXT \"$0\"" ]
	},
	"VIOLATION": {
		"prefix": "VIOLATION (TXT ",
		"description": "Define a VIOLATION",
		"body":[ "VIOLATION (TXT \"$0\"" ]
	},
	"{EX}": {
		"prefix": "{EX}",
		"description": "Marks the start of an ExecEngine function",
		"body":[ "{EX} ${1|InsPair,DelPair,InsAtom,DelAtom,MrgAtom,SetConcept,ClearConcept,SetNavToOnCommit,SetNavToOnRollBack,TerminateThisExecEngine,TriggerService|}" ]
	},
	"InsPair": {
		"prefix": "InsPair",
		"description": "most common way in which InsPairs are done",
		"body":[ "InsPair;${1:Relname};${2:srcConcept};\", SRC I, TXT \";${3:tgtConcept};\", TGT I" ]
	},
	"DelPair": {
		"prefix": "DelPair",
		"description": "most common way in which DelPairs are done",
		"body":[ "DelPair;${1:Relname};${2:srcConcept};\", SRC I, TXT \";${3:tgtConcept};\", TGT I" ]
	},
	"NewStruct": {
		"prefix": "NewStruct",
		"description": "NewStruct is deprecated - change to InsAtom",
		"body":[
			"-- The function `NewStruct` is deprecated. Please use `InsAtom` instead.",
			"InsAtom;${1:concept}\"",
			"          ,TXT \"{EX} $0\"" 
		]
	},
	"InsAtom": {
		"prefix": "InsAtom",
		"description": "most common way in which InsAtoms are done",
		"body":[
			"InsAtom;${1:concept}\"",
			"          ,TXT \"{EX} $0\""
		]
	},
	"DelAtom": {
		"prefix": "DelAtom",
		"description": "most common way in which DelAtoms are done",
		"body":[ "DelAtom;${1:concept};\", ${2:atomid}"	]
	},
	"MrgAtom": {
		"prefix": "MrgAtom",
		"description": "Unify both atoms, i.e. merge (and then delete) TGT atom into SRC atom",
		"body":[ "MrgAtom;${1:concept};\", SRC I, TXT \";${2:concept};\", TGT I" ]
	},
	"SetConcept": {
		"prefix": "SetConcept",
		"description": "Add atomId[ConceptA] to [ConceptB]-set",
		"body":[ "SetConcept;${1:CurrentConcept};${2:NewConcept};\", ${3:atomid}"	]
	},
	"ClearConcept": {
		"prefix": ["ClearConcept", "ClrConcept"],
		"description": "Remove atomId as member from [Concept] set. Can only be done if [Concept] is a specialization of another concept",
		"body":[ "ClearConcept;${1:concept};\", ${2:atomid}"	]
	},
	"SetNavToOnCommit": {
		"prefix": "SetNavToOnCommit",
		"description": "Specify INTERFACE to which to navigate in case the current transaction is committed to",
		"body":[ "SetNavToOnCommit;\", ${1:/InterfaceID}"	]
	},
	"SetNavToOnRollBack": {
		"prefix": "SetNavToOnRollBack",
		"description": "Specify INTERFACE to which to navigate in case the current transaction rolled back",
		"body":[ "SetNavToOnRollBack;\", ${1:/InterfaceID}"	]
	},
	"TerminateThisExecEngine": {
		"prefix": "TerminateThisExecEngine",
		"description": "Terminate the ExecEngine that maintains the rule in which this function is executed",
		"body":[ "TerminateThisExecEngine;${1:Optional message for userlog}\""	]
	},
	"TriggerService": {
		"prefix": "TriggerService",
		"description": "Trigger the specified service (i.e. SERVICE that maintains a set of rules)",
		"body":[ "TriggerService;${1:SERVICE that maintains a set of rules}\""	]
	},
	"Warshall": {
		"prefix": [ "Warshall", "TransitiveClosure", "star" ],
		"description": "Compute transitive closure of a relation r",
		"body":[ "--[Transitive Closure of ${1:Relation}[${2:concept}]]",
			"$1 :: $2 * $2 -- relation `r` of which r+ will be computed",
			"$1Copy :: $2 * $2 -- copied value of `r` allows for detecting modification events",
			"$1Plus :: $2 * $2 -- transitive closure of `r`, i.e. `r+`",
		   " ",
			"ROLE ExecEngine MAINTAINS \"Compute $1Plus\"",
			"RULE \"Compute $1Plus\": $1[$2] = $1Copy[$2]",
			"VIOLATION (TXT \"{EX} TransitiveClosure;$1;$2;$1Copy;$1Plus\")"
		]
	},
	"Equivalence rule": {
		"prefix": "eqv-relation",
		"description": "Equivalence: relation == expression",
		"body": [
			"-- EQUIVALENCE ${1:Relname}[${2:srcConcept}*${3:tgtConcept}] == ${4:Expression}",
			"$1 :: $2 * $3 -- define relation $1 as shorthand for $4",
			"ROLE ExecEngine MAINTAINS \"Equivalence - InsPair $1\"",
			"RULE \"Equivalence - InsPair $1\": $4 |- $1[$2*$3]",
			"VIOLATION (TXT \"{EX} InsPair;$1;$2;\", SRC I, TXT \";$3;\", TGT I)",
			"ROLE ExecEngine MAINTAINS \"Equivalence - DelPair $1\"",
			"RULE \"Equivalence - DelPair $1\": $1[$2*$3] |- $4",
			"VIOLATION (TXT \"{EX} DelPair;$1;$2;\", SRC I, TXT \";$3;\", TGT I)",
			"$0"
		]
	},
	"PROP Equivalence rule": {
		"prefix": "eqv-property",
		"description": "Equivalence with [PROP]-attribute",
		"body": [
			"-- EQUIVALENCE ${1:Relname}[${2:concept}] [PROP] == ${3:Expression}",
			"$1 :: $2 * $2 [PROP] -- define relation $1 as shorthand for $3",
			"ROLE ExecEngine MAINTAINS \"Equivalence - InsPair $1\"",
			"RULE \"Equivalence - InsPair $1\": $3 |- $1[$2]",
			"VIOLATION (TXT \"{EX} InsPair;$1;$2;\", SRC I, TXT \";$2;\", TGT I)",
			"ROLE ExecEngine MAINTAINS \"Equivalence - DelPair $1\"",
			"RULE \"Equivalence - DelPair $1\": $1[$2] |- $3",
			"VIOLATION (TXT \"{EX} DelPair;$1;$2;\", SRC I, TXT \";$2;\", TGT I)",
			"$0"
		]
	},
	"INTERFACE -- FOR -- BOX <BOXTYPE>": {
		"prefix": "INTERFACE -- FOR -- BOX <BOXTYPE>",
		"description": "e.g. DIV/ROWSNL/SHCOLS etc.",
		"body":[
			"INTERFACE \"${1:ifcname}\" FOR ${2|User,Anonymous,${3:role}|}: ${4:Expression} ${5|cRud,CRud,CRUD|} BOX <${6|DIV,ROWSNL,HROWS,HROWSNL,COLSNL,HCOLS,SCOLS,SHCOLS,PROPBUTTON,GRID,SSIFORM}>",
			"   [ $0",
			"   ]"
		]
	},
	"INTERFACE -- FOR -- BOX/COLS/TABS/ROWS": {
		"prefix": "INTERFACE -- FOR --",
		"description": "BOX/COLS/TABS/ROWS",
		"body":[
			"INTERFACE \"${1:ifcname}\" FOR ${2|User,Anonymous,${3:role}|}: ${4:Expression} ${5|cRud,CRud,CRUD|} ${6|BOX,COLS,TABS,ROWS|}",
			"   [ $0",
			"   ]"
		]
	},
	"INTERFACE <BOXTYPE> for all users": {
		"prefix": "INTERFACE with <BOXTYPE> for all users",
		"description": "e.g. DIV/ROWSNL/SHCOLS etc.",
		"body":[
			"INTERFACE \"${1:ifcname}\": ${2:Expression} ${3|cRud,CRud,CRUD|} BOX <${4|DIV,ROWSNL,HROWS,HROWSNL,COLSNL,HCOLS,SCOLS,SHCOLS,PROPBUTTON,GRID,SSIFORM|}>",
			"   [ $0",
			"   ]"
		]
	},
	"INTERFACE BOX/COLS/TABS/ROWS for all users": {
		"prefix": "INTERFACE for all users",
		"description": "BOX/COLS/TABS/ROWS",
		"body":[
			"INTERFACE \"${1:ifcname}\": ${2:Expression} ${3|cRud,CRud,CRUD|} ${4|BOX,COLS,TABS,ROWS|}",
			"   [ $0",
			"   ]"
		]
	},
	"VIEW": {
		"prefix": "VIEW <viewname>:",
		"description": "simple VIEW for a concept",
		"body":[
			"VIEW \"${1:viewname}\": ${2:concept}",
			"   { $0",
			"   } ENDVIEW"
		]
	},
	"VIEW (using a HTML template)": {
		"prefix": "VIEW <viewname>:",
		"description": "VIEW using a HTML-template",
		"body":[
			"VIEW \"${1:viewname}\": ${2:concept}",
			"   { $0",
			"   } HTML TEMPLATE \"${3:templatefilename.html}\" ENDVIEW"
		]
	},
	"PROPBUTTON (extended)": {
		"prefix": "<PROPBUTTON>",
		"description": "propbutton arguments",
		"body":[
			"<PROPBUTTON>",
			"[ property: ${1:propertyrelation} cRUd",
			", disabled: ${2:expression} cRud",
			", hide: ${3:expression} cRud",
			", popovertext: ${4:expression} cRud",
			"]"
		]
	},
	"PROPBUTTON (simple)": {
		"prefix": "<PROPBUTTON>",
		"description": "simple property-button",
		"body":[
			"<PROPBUTTON> [ property: ${0:propertyrelation} cRUd ]"
		]
	}
}